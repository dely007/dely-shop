<?xml version="1.0" encoding="UTF-8" ?>

<!-- scan="true"    当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!--  scanPeriod="30 seconds"   设置每30秒自动扫描,若没有指定具体单位则以milliseconds为标准(单位:milliseconds, seconds, minutes or hours)  -->
<!-- debug="false"当此属性设置为true时，将复印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="true" scanPeriod="30 seconds">

    <conversionRule conversionWord="msg" converterClass="net.dely.shop.config.SensitiveDataLogConfig"/>
    <!-- 处理日志脱敏  -->
    <conversionRule conversionWord="msgtwo" converterClass="net.dely.shop.config.SensitiveDataLogConfig"/>

    <!-- 上下文名称  -->
    <contextName>${applicationName}</contextName>

    <!-- 存放日志文件路径 -->
    <property name="LOG_PATH" value="/shopLog/log"/>
    <property name="Log_AUDIT" value="/shopLog/auditlog"/>

    <springProperty scope="context" name="module_name" source="spring.application.name"/>
    <springProperty scope="context" name="active" source="spring.profiles.active"/>

    <!--获取主机名-->
    <define name="hostname" class="net.dely.shop.config.log.HostNamePropertyDefiner"/>

    <!-- ch.qos.logback.core.ConsoleAppender 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder charset="UTF-8">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->

            <pattern>[TRACEID:%X{traceId}]| %d{yyyy-MM-dd HH:mm:ss}| %-5level| [%thread]| %logger{50}| %msg%n</pattern>
        </encoder>

        <!--<encoder charset="UTF-8" class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <pattern>
                    <pattern>
                        {
                        "app": "${module_name}",
                        "active": "${active}",
                        "host": "${hostname}",
                        "traceId": "%X{traceId}",
                        "uid": "%X{uid}",
                        "time": "%date{yyyy-MM-dd HH:mm:ss.SSS}",
                        "level": "%level",
                        "pid": "${PID:-}",
                        "class": "%logger",
                        "method":"%method",
                        "line":"%line",
                        "message":"%message",
                        "stack_trace": "%exception"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>-->

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
    </appender>

    <!-- DEBUG级别 -->
    <appender name="FILE_DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>DEBUG</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <File>${LOG_PATH}/debug/debug.log</File>
        <!-- 根据时间来制定滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>
                ${LOG_PATH}/debug/debug.%d{yyyy-MM-dd}.%i.log
            </FileNamePattern>
            <!-- 多久后自动清楚旧的日志文件,单位:日 -->
            <MaxHistory>30</MaxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 默认值是 10MB,文档最大值 -->
                <MaxFileSize>200MB</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <encoder>
            <Pattern>[TRACEID:%X{traceId}]| %d{yyyy-MM-dd HH:mm:ss}| %-5level|%thread| %logger{50}| %msg%n</Pattern>
        </encoder>
    </appender>

    <!-- INFO级别 -->
    <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>INFO</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <File>${LOG_PATH}/info/info.log</File>
        <!-- 根据时间来制定滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>
                ${LOG_PATH}/info/info.%d{yyyy-MM-dd}.%i.log
            </FileNamePattern>
            <!-- 多久后自动清楚旧的日志文件,单位:日 -->
            <MaxHistory>30</MaxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 默认值是 10MB,文档最大值 -->
                <MaxFileSize>200MB</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!--<encoder>
            <Pattern>[TRACEID:%X{traceId}]| %d{yyyy-MM-dd HH:mm:ss}| %-5level|%thread| %logger{50}| %msg%n</Pattern>
        </encoder>-->

        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <pattern>
                    <pattern>
                        {
                        "app": "${module_name}",
                        "active": "${active}",
                        "host": "${hostname}",
                        "traceId": "%X{traceId}",
                        "uid": "%X{uid}",
                        "time": "%date{yyyy-MM-dd HH:mm:ss.SSS}",
                        "level": "%level",
                        "pid": "${PID:-}",
                        "class": "%logger",
                        "method":"%method",
                        "line":"%line",
                        "message":"%message",
                        "stack_trace": "%exception"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>

    </appender>


    <!-- WARN级别 -->
    <appender name="FILE_WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>WARN</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <File>${LOG_PATH}/warn/warn.log</File>
        <!-- 根据时间来制定滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>
                ${LOG_PATH}/warn/warn.%d{yyyy-MM-dd}.%i.log
            </FileNamePattern>
            <!-- 多久后自动清楚旧的日志文件,单位:日 -->
            <MaxHistory>30</MaxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 默认值是 10MB,文档最大值 -->
                <MaxFileSize>200MB</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <encoder>
            <Pattern>[TRACEID:%X{traceId}]| %d{yyyy-MM-dd HH:mm:ss}| %-5level|%thread| %logger{50}| %msg%n</Pattern>
        </encoder>
    </appender>

    <!-- ERROR级别 -->
    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>ERROR</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <File>${LOG_PATH}/error/error.log</File>
        <!-- 根据时间来制定滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>
                ${LOG_PATH}/error/error.%d{yyyy-MM-dd}.%i.log
            </FileNamePattern>
            <!-- 多久后自动清楚旧的日志文件,单位:日 -->
            <MaxHistory>30</MaxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 默认值是 10MB,文档最大值 -->
                <MaxFileSize>200MB</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <encoder>
            <Pattern>[TRACEID:%X{traceId}]| %d{yyyy-MM-dd HH:mm:ss}| %-5level|%thread| %logger{50}| %msg%n</Pattern>
        </encoder>
    </appender>

    <!-- 安全日志 -->
    <appender name="AUDIT_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>INFO</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <File>${Log_AUDIT}/auditlog/audit.log</File>
        <!--<append>true</append>-->
        <!-- 根据时间来制定滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>
                ${Log_AUDIT}/auditlog/audit_%d{yyyyMMdd}.%i.log
            </FileNamePattern>
            <!-- 多久后自动清楚旧的日志文件,单位:日 -->
            <MaxHistory>7</MaxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 默认值是 10MB,文档最大值 -->
                <MaxFileSize>200MB</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <encoder>
            <Pattern>%d{yyyy-MM-dd HH:mm:ss}| %-5level|%thread| %logger{50}| %msgtwo%n</Pattern>
        </encoder>
    </appender>

    <!-- 4. 最终的策略 -->
    <!-- 4.1 开发环境:打印控制台-->
    <springProfile name="dev">
        <!-- additivity="false" 相当于不继承root 默认为true -->
        <logger name="net.dely" level="debug">
            <appender-ref ref="AUDIT_INFO"/>
        </logger>

        <logger name="jdbc.sqlonly" level="INFO"/>
        <logger name="jdbc.audit" level="ERROR"/>
        <logger name="jdbc.resultset" level="ERROR"/>
        <logger name="jdbc.connection" level="ERROR"/>

        <!-- 当前日志总级别为TRACE、DEBUG、INFO、 WARN、ERROR、ALL和 OF -->
        <!-- the level of the root level is set to DEBUG by default.       -->
        <root level="info">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="FILE_INFO"/>
            <appender-ref ref="FILE_WARN"/>
            <appender-ref ref="FILE_ERROR"/>
        </root>
    </springProfile>

    <!-- 4.2 生产环境:输出到文档-->
    <springProfile name="pro">
        <root level="info">
            <appender-ref ref="FILE_DEBUG"/>
            <appender-ref ref="FILE_INFO"/>
            <appender-ref ref="FILE_WARN"/>
            <appender-ref ref="FILE_ERROR"/>
        </root>
    </springProfile>
</configuration>
